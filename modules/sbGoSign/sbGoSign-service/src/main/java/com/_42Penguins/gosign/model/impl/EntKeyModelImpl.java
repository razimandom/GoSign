/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com._42Penguins.gosign.model.impl;

import aQute.bnd.annotation.ProviderType;

import com._42Penguins.gosign.model.EntKey;
import com._42Penguins.gosign.model.EntKeyModel;
import com._42Penguins.gosign.model.EntKeySoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the EntKey service. Represents a row in the &quot;genkey_data&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link EntKeyModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EntKeyImpl}.
 * </p>
 *
 * @author Raziman Dom
 * @see EntKeyImpl
 * @see EntKey
 * @see EntKeyModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class EntKeyModelImpl extends BaseModelImpl<EntKey>
	implements EntKeyModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a ent key model instance should use the {@link EntKey} interface instead.
	 */
	public static final String TABLE_NAME = "genkey_data";
	public static final Object[][] TABLE_COLUMNS = {
			{ "userId", Types.BIGINT },
			{ "key_status", Types.VARCHAR },
			{ "key_dateCreated", Types.VARCHAR },
			{ "privatekey_Data", Types.VARCHAR },
			{ "publickey_Data", Types.VARCHAR },
			{ "salt_Data", Types.VARCHAR },
			{ "vector_Data", Types.VARCHAR },
			{ "sign_name", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("key_status", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("key_dateCreated", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("privatekey_Data", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("publickey_Data", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("salt_Data", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("vector_Data", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sign_name", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table genkey_data (userId LONG not null primary key,key_status VARCHAR(75) null,key_dateCreated VARCHAR(75) null,privatekey_Data VARCHAR(75) null,publickey_Data VARCHAR(75) null,salt_Data VARCHAR(75) null,vector_Data VARCHAR(75) null,sign_name VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table genkey_data";
	public static final String ORDER_BY_JPQL = " ORDER BY entKey.userId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY genkey_data.userId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com._42Penguins.gosign.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com._42Penguins.gosign.model.EntKey"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com._42Penguins.gosign.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com._42Penguins.gosign.model.EntKey"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static EntKey toModel(EntKeySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		EntKey model = new EntKeyImpl();

		model.setUserId(soapModel.getUserId());
		model.setKey_status(soapModel.getKey_status());
		model.setKey_dateCreated(soapModel.getKey_dateCreated());
		model.setPrivatekey_Data(soapModel.getPrivatekey_Data());
		model.setPublickey_Data(soapModel.getPublickey_Data());
		model.setSalt_Data(soapModel.getSalt_Data());
		model.setVector_Data(soapModel.getVector_Data());
		model.setSign_name(soapModel.getSign_name());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<EntKey> toModels(EntKeySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<EntKey> models = new ArrayList<EntKey>(soapModels.length);

		for (EntKeySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com._42Penguins.gosign.service.util.ServiceProps.get(
				"lock.expiration.time.com._42Penguins.gosign.model.EntKey"));

	public EntKeyModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _userId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setUserId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _userId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return EntKey.class;
	}

	@Override
	public String getModelClassName() {
		return EntKey.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("userId", getUserId());
		attributes.put("key_status", getKey_status());
		attributes.put("key_dateCreated", getKey_dateCreated());
		attributes.put("privatekey_Data", getPrivatekey_Data());
		attributes.put("publickey_Data", getPublickey_Data());
		attributes.put("salt_Data", getSalt_Data());
		attributes.put("vector_Data", getVector_Data());
		attributes.put("sign_name", getSign_name());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String key_status = (String)attributes.get("key_status");

		if (key_status != null) {
			setKey_status(key_status);
		}

		String key_dateCreated = (String)attributes.get("key_dateCreated");

		if (key_dateCreated != null) {
			setKey_dateCreated(key_dateCreated);
		}

		String privatekey_Data = (String)attributes.get("privatekey_Data");

		if (privatekey_Data != null) {
			setPrivatekey_Data(privatekey_Data);
		}

		String publickey_Data = (String)attributes.get("publickey_Data");

		if (publickey_Data != null) {
			setPublickey_Data(publickey_Data);
		}

		String salt_Data = (String)attributes.get("salt_Data");

		if (salt_Data != null) {
			setSalt_Data(salt_Data);
		}

		String vector_Data = (String)attributes.get("vector_Data");

		if (vector_Data != null) {
			setVector_Data(vector_Data);
		}

		String sign_name = (String)attributes.get("sign_name");

		if (sign_name != null) {
			setSign_name(sign_name);
		}
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getKey_status() {
		if (_key_status == null) {
			return StringPool.BLANK;
		}
		else {
			return _key_status;
		}
	}

	@Override
	public void setKey_status(String key_status) {
		_key_status = key_status;
	}

	@JSON
	@Override
	public String getKey_dateCreated() {
		if (_key_dateCreated == null) {
			return StringPool.BLANK;
		}
		else {
			return _key_dateCreated;
		}
	}

	@Override
	public void setKey_dateCreated(String key_dateCreated) {
		_key_dateCreated = key_dateCreated;
	}

	@JSON
	@Override
	public String getPrivatekey_Data() {
		if (_privatekey_Data == null) {
			return StringPool.BLANK;
		}
		else {
			return _privatekey_Data;
		}
	}

	@Override
	public void setPrivatekey_Data(String privatekey_Data) {
		_privatekey_Data = privatekey_Data;
	}

	@JSON
	@Override
	public String getPublickey_Data() {
		if (_publickey_Data == null) {
			return StringPool.BLANK;
		}
		else {
			return _publickey_Data;
		}
	}

	@Override
	public void setPublickey_Data(String publickey_Data) {
		_publickey_Data = publickey_Data;
	}

	@JSON
	@Override
	public String getSalt_Data() {
		if (_salt_Data == null) {
			return StringPool.BLANK;
		}
		else {
			return _salt_Data;
		}
	}

	@Override
	public void setSalt_Data(String salt_Data) {
		_salt_Data = salt_Data;
	}

	@JSON
	@Override
	public String getVector_Data() {
		if (_vector_Data == null) {
			return StringPool.BLANK;
		}
		else {
			return _vector_Data;
		}
	}

	@Override
	public void setVector_Data(String vector_Data) {
		_vector_Data = vector_Data;
	}

	@JSON
	@Override
	public String getSign_name() {
		if (_sign_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _sign_name;
		}
	}

	@Override
	public void setSign_name(String sign_name) {
		_sign_name = sign_name;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			EntKey.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public EntKey toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (EntKey)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EntKeyImpl entKeyImpl = new EntKeyImpl();

		entKeyImpl.setUserId(getUserId());
		entKeyImpl.setKey_status(getKey_status());
		entKeyImpl.setKey_dateCreated(getKey_dateCreated());
		entKeyImpl.setPrivatekey_Data(getPrivatekey_Data());
		entKeyImpl.setPublickey_Data(getPublickey_Data());
		entKeyImpl.setSalt_Data(getSalt_Data());
		entKeyImpl.setVector_Data(getVector_Data());
		entKeyImpl.setSign_name(getSign_name());

		entKeyImpl.resetOriginalValues();

		return entKeyImpl;
	}

	@Override
	public int compareTo(EntKey entKey) {
		long primaryKey = entKey.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof EntKey)) {
			return false;
		}

		EntKey entKey = (EntKey)obj;

		long primaryKey = entKey.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<EntKey> toCacheModel() {
		EntKeyCacheModel entKeyCacheModel = new EntKeyCacheModel();

		entKeyCacheModel.userId = getUserId();

		entKeyCacheModel.key_status = getKey_status();

		String key_status = entKeyCacheModel.key_status;

		if ((key_status != null) && (key_status.length() == 0)) {
			entKeyCacheModel.key_status = null;
		}

		entKeyCacheModel.key_dateCreated = getKey_dateCreated();

		String key_dateCreated = entKeyCacheModel.key_dateCreated;

		if ((key_dateCreated != null) && (key_dateCreated.length() == 0)) {
			entKeyCacheModel.key_dateCreated = null;
		}

		entKeyCacheModel.privatekey_Data = getPrivatekey_Data();

		String privatekey_Data = entKeyCacheModel.privatekey_Data;

		if ((privatekey_Data != null) && (privatekey_Data.length() == 0)) {
			entKeyCacheModel.privatekey_Data = null;
		}

		entKeyCacheModel.publickey_Data = getPublickey_Data();

		String publickey_Data = entKeyCacheModel.publickey_Data;

		if ((publickey_Data != null) && (publickey_Data.length() == 0)) {
			entKeyCacheModel.publickey_Data = null;
		}

		entKeyCacheModel.salt_Data = getSalt_Data();

		String salt_Data = entKeyCacheModel.salt_Data;

		if ((salt_Data != null) && (salt_Data.length() == 0)) {
			entKeyCacheModel.salt_Data = null;
		}

		entKeyCacheModel.vector_Data = getVector_Data();

		String vector_Data = entKeyCacheModel.vector_Data;

		if ((vector_Data != null) && (vector_Data.length() == 0)) {
			entKeyCacheModel.vector_Data = null;
		}

		entKeyCacheModel.sign_name = getSign_name();

		String sign_name = entKeyCacheModel.sign_name;

		if ((sign_name != null) && (sign_name.length() == 0)) {
			entKeyCacheModel.sign_name = null;
		}

		return entKeyCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{userId=");
		sb.append(getUserId());
		sb.append(", key_status=");
		sb.append(getKey_status());
		sb.append(", key_dateCreated=");
		sb.append(getKey_dateCreated());
		sb.append(", privatekey_Data=");
		sb.append(getPrivatekey_Data());
		sb.append(", publickey_Data=");
		sb.append(getPublickey_Data());
		sb.append(", salt_Data=");
		sb.append(getSalt_Data());
		sb.append(", vector_Data=");
		sb.append(getVector_Data());
		sb.append(", sign_name=");
		sb.append(getSign_name());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("com._42Penguins.gosign.model.EntKey");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>key_status</column-name><column-value><![CDATA[");
		sb.append(getKey_status());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>key_dateCreated</column-name><column-value><![CDATA[");
		sb.append(getKey_dateCreated());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>privatekey_Data</column-name><column-value><![CDATA[");
		sb.append(getPrivatekey_Data());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>publickey_Data</column-name><column-value><![CDATA[");
		sb.append(getPublickey_Data());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>salt_Data</column-name><column-value><![CDATA[");
		sb.append(getSalt_Data());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>vector_Data</column-name><column-value><![CDATA[");
		sb.append(getVector_Data());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sign_name</column-name><column-value><![CDATA[");
		sb.append(getSign_name());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = EntKey.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			EntKey.class
		};
	private long _userId;
	private String _key_status;
	private String _key_dateCreated;
	private String _privatekey_Data;
	private String _publickey_Data;
	private String _salt_Data;
	private String _vector_Data;
	private String _sign_name;
	private EntKey _escapedModel;
}