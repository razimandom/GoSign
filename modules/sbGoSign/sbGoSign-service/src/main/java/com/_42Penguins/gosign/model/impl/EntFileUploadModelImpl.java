/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com._42Penguins.gosign.model.impl;

import aQute.bnd.annotation.ProviderType;

import com._42Penguins.gosign.model.EntFileUpload;
import com._42Penguins.gosign.model.EntFileUploadFile_blobBlobModel;
import com._42Penguins.gosign.model.EntFileUploadModel;
import com._42Penguins.gosign.model.EntFileUploadSoap;
import com._42Penguins.gosign.service.EntFileUploadLocalServiceUtil;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Blob;
import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the EntFileUpload service. Represents a row in the &quot;fileupload_data&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link EntFileUploadModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EntFileUploadImpl}.
 * </p>
 *
 * @author Raziman Dom
 * @see EntFileUploadImpl
 * @see EntFileUpload
 * @see EntFileUploadModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class EntFileUploadModelImpl extends BaseModelImpl<EntFileUpload>
	implements EntFileUploadModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a ent file upload model instance should use the {@link EntFileUpload} interface instead.
	 */
	public static final String TABLE_NAME = "fileupload_data";
	public static final Object[][] TABLE_COLUMNS = {
			{ "fileId", Types.BIGINT },
			{ "docId", Types.BIGINT },
			{ "file_name", Types.VARCHAR },
			{ "file_type", Types.VARCHAR },
			{ "file_blob", Types.BLOB }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("fileId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("docId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("file_name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("file_type", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("file_blob", Types.BLOB);
	}

	public static final String TABLE_SQL_CREATE = "create table fileupload_data (fileId LONG not null primary key,docId LONG,file_name VARCHAR(75) null,file_type VARCHAR(75) null,file_blob BLOB)";
	public static final String TABLE_SQL_DROP = "drop table fileupload_data";
	public static final String ORDER_BY_JPQL = " ORDER BY entFileUpload.fileId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY fileupload_data.fileId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com._42Penguins.gosign.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com._42Penguins.gosign.model.EntFileUpload"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com._42Penguins.gosign.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com._42Penguins.gosign.model.EntFileUpload"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static EntFileUpload toModel(EntFileUploadSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		EntFileUpload model = new EntFileUploadImpl();

		model.setFileId(soapModel.getFileId());
		model.setDocId(soapModel.getDocId());
		model.setFile_name(soapModel.getFile_name());
		model.setFile_type(soapModel.getFile_type());
		model.setFile_blob(soapModel.getFile_blob());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<EntFileUpload> toModels(EntFileUploadSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<EntFileUpload> models = new ArrayList<EntFileUpload>(soapModels.length);

		for (EntFileUploadSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com._42Penguins.gosign.service.util.ServiceProps.get(
				"lock.expiration.time.com._42Penguins.gosign.model.EntFileUpload"));

	public EntFileUploadModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _fileId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFileId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _fileId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return EntFileUpload.class;
	}

	@Override
	public String getModelClassName() {
		return EntFileUpload.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("fileId", getFileId());
		attributes.put("docId", getDocId());
		attributes.put("file_name", getFile_name());
		attributes.put("file_type", getFile_type());
		attributes.put("file_blob", getFile_blob());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long fileId = (Long)attributes.get("fileId");

		if (fileId != null) {
			setFileId(fileId);
		}

		Long docId = (Long)attributes.get("docId");

		if (docId != null) {
			setDocId(docId);
		}

		String file_name = (String)attributes.get("file_name");

		if (file_name != null) {
			setFile_name(file_name);
		}

		String file_type = (String)attributes.get("file_type");

		if (file_type != null) {
			setFile_type(file_type);
		}

		Blob file_blob = (Blob)attributes.get("file_blob");

		if (file_blob != null) {
			setFile_blob(file_blob);
		}
	}

	@JSON
	@Override
	public long getFileId() {
		return _fileId;
	}

	@Override
	public void setFileId(long fileId) {
		_fileId = fileId;
	}

	@JSON
	@Override
	public long getDocId() {
		return _docId;
	}

	@Override
	public void setDocId(long docId) {
		_docId = docId;
	}

	@JSON
	@Override
	public String getFile_name() {
		if (_file_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _file_name;
		}
	}

	@Override
	public void setFile_name(String file_name) {
		_file_name = file_name;
	}

	@JSON
	@Override
	public String getFile_type() {
		if (_file_type == null) {
			return StringPool.BLANK;
		}
		else {
			return _file_type;
		}
	}

	@Override
	public void setFile_type(String file_type) {
		_file_type = file_type;
	}

	@JSON
	@Override
	public Blob getFile_blob() {
		if (_file_blobBlobModel == null) {
			try {
				_file_blobBlobModel = EntFileUploadLocalServiceUtil.getFile_blobBlobModel(getPrimaryKey());
			}
			catch (Exception e) {
			}
		}

		Blob blob = null;

		if (_file_blobBlobModel != null) {
			blob = _file_blobBlobModel.getFile_blobBlob();
		}

		return blob;
	}

	@Override
	public void setFile_blob(Blob file_blob) {
		if (_file_blobBlobModel == null) {
			_file_blobBlobModel = new EntFileUploadFile_blobBlobModel(getPrimaryKey(),
					file_blob);
		}
		else {
			_file_blobBlobModel.setFile_blobBlob(file_blob);
		}
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			EntFileUpload.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public EntFileUpload toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (EntFileUpload)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EntFileUploadImpl entFileUploadImpl = new EntFileUploadImpl();

		entFileUploadImpl.setFileId(getFileId());
		entFileUploadImpl.setDocId(getDocId());
		entFileUploadImpl.setFile_name(getFile_name());
		entFileUploadImpl.setFile_type(getFile_type());

		entFileUploadImpl.resetOriginalValues();

		return entFileUploadImpl;
	}

	@Override
	public int compareTo(EntFileUpload entFileUpload) {
		long primaryKey = entFileUpload.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof EntFileUpload)) {
			return false;
		}

		EntFileUpload entFileUpload = (EntFileUpload)obj;

		long primaryKey = entFileUpload.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		EntFileUploadModelImpl entFileUploadModelImpl = this;

		entFileUploadModelImpl._file_blobBlobModel = null;
	}

	@Override
	public CacheModel<EntFileUpload> toCacheModel() {
		EntFileUploadCacheModel entFileUploadCacheModel = new EntFileUploadCacheModel();

		entFileUploadCacheModel.fileId = getFileId();

		entFileUploadCacheModel.docId = getDocId();

		entFileUploadCacheModel.file_name = getFile_name();

		String file_name = entFileUploadCacheModel.file_name;

		if ((file_name != null) && (file_name.length() == 0)) {
			entFileUploadCacheModel.file_name = null;
		}

		entFileUploadCacheModel.file_type = getFile_type();

		String file_type = entFileUploadCacheModel.file_type;

		if ((file_type != null) && (file_type.length() == 0)) {
			entFileUploadCacheModel.file_type = null;
		}

		return entFileUploadCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{fileId=");
		sb.append(getFileId());
		sb.append(", docId=");
		sb.append(getDocId());
		sb.append(", file_name=");
		sb.append(getFile_name());
		sb.append(", file_type=");
		sb.append(getFile_type());

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com._42Penguins.gosign.model.EntFileUpload");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>fileId</column-name><column-value><![CDATA[");
		sb.append(getFileId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>docId</column-name><column-value><![CDATA[");
		sb.append(getDocId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>file_name</column-name><column-value><![CDATA[");
		sb.append(getFile_name());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>file_type</column-name><column-value><![CDATA[");
		sb.append(getFile_type());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = EntFileUpload.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			EntFileUpload.class
		};
	private long _fileId;
	private long _docId;
	private String _file_name;
	private String _file_type;
	private EntFileUploadFile_blobBlobModel _file_blobBlobModel;
	private EntFileUpload _escapedModel;
}