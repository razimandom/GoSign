/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package DocRegistration.model.impl;

import DocRegistration.model.GenKey;
import DocRegistration.model.GenKeyModel;
import DocRegistration.model.GenKeyPrivatekey_FileBlobModel;
import DocRegistration.model.GenKeyPublickey_FileBlobModel;
import DocRegistration.model.GenKeySoap;

import DocRegistration.service.GenKeyLocalServiceUtil;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Blob;
import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the GenKey service. Represents a row in the &quot;genkey_data&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link GenKeyModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link GenKeyImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see GenKeyImpl
 * @see GenKey
 * @see GenKeyModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class GenKeyModelImpl extends BaseModelImpl<GenKey>
	implements GenKeyModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a gen key model instance should use the {@link GenKey} interface instead.
	 */
	public static final String TABLE_NAME = "genkey_data";
	public static final Object[][] TABLE_COLUMNS = {
			{ "genkeyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "privatekey_File", Types.BLOB },
			{ "publickey_File", Types.BLOB },
			{ "publickey_Text", Types.VARCHAR },
			{ "key_dateCreated", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("genkeyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("privatekey_File", Types.BLOB);
		TABLE_COLUMNS_MAP.put("publickey_File", Types.BLOB);
		TABLE_COLUMNS_MAP.put("publickey_Text", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("key_dateCreated", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table genkey_data (genkeyId LONG not null primary key,userId LONG,privatekey_File BLOB,publickey_File BLOB,publickey_Text VARCHAR(75) null,key_dateCreated VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table genkey_data";
	public static final String ORDER_BY_JPQL = " ORDER BY genKey.genkeyId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY genkey_data.genkeyId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(DocRegistration.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.DocRegistration.model.GenKey"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(DocRegistration.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.DocRegistration.model.GenKey"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static GenKey toModel(GenKeySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		GenKey model = new GenKeyImpl();

		model.setGenkeyId(soapModel.getGenkeyId());
		model.setUserId(soapModel.getUserId());
		model.setPrivatekey_File(soapModel.getPrivatekey_File());
		model.setPublickey_File(soapModel.getPublickey_File());
		model.setPublickey_Text(soapModel.getPublickey_Text());
		model.setKey_dateCreated(soapModel.getKey_dateCreated());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<GenKey> toModels(GenKeySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<GenKey> models = new ArrayList<GenKey>(soapModels.length);

		for (GenKeySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(DocRegistration.service.util.ServiceProps.get(
				"lock.expiration.time.DocRegistration.model.GenKey"));

	public GenKeyModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _genkeyId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setGenkeyId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _genkeyId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return GenKey.class;
	}

	@Override
	public String getModelClassName() {
		return GenKey.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("genkeyId", getGenkeyId());
		attributes.put("userId", getUserId());
		attributes.put("privatekey_File", getPrivatekey_File());
		attributes.put("publickey_File", getPublickey_File());
		attributes.put("publickey_Text", getPublickey_Text());
		attributes.put("key_dateCreated", getKey_dateCreated());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long genkeyId = (Long)attributes.get("genkeyId");

		if (genkeyId != null) {
			setGenkeyId(genkeyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Blob privatekey_File = (Blob)attributes.get("privatekey_File");

		if (privatekey_File != null) {
			setPrivatekey_File(privatekey_File);
		}

		Blob publickey_File = (Blob)attributes.get("publickey_File");

		if (publickey_File != null) {
			setPublickey_File(publickey_File);
		}

		String publickey_Text = (String)attributes.get("publickey_Text");

		if (publickey_Text != null) {
			setPublickey_Text(publickey_Text);
		}

		String key_dateCreated = (String)attributes.get("key_dateCreated");

		if (key_dateCreated != null) {
			setKey_dateCreated(key_dateCreated);
		}
	}

	@JSON
	@Override
	public long getGenkeyId() {
		return _genkeyId;
	}

	@Override
	public void setGenkeyId(long genkeyId) {
		_genkeyId = genkeyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public Blob getPrivatekey_File() {
		if (_privatekey_FileBlobModel == null) {
			try {
				_privatekey_FileBlobModel = GenKeyLocalServiceUtil.getPrivatekey_FileBlobModel(getPrimaryKey());
			}
			catch (Exception e) {
			}
		}

		Blob blob = null;

		if (_privatekey_FileBlobModel != null) {
			blob = _privatekey_FileBlobModel.getPrivatekey_FileBlob();
		}

		return blob;
	}

	@Override
	public void setPrivatekey_File(Blob privatekey_File) {
		if (_privatekey_FileBlobModel == null) {
			_privatekey_FileBlobModel = new GenKeyPrivatekey_FileBlobModel(getPrimaryKey(),
					privatekey_File);
		}
		else {
			_privatekey_FileBlobModel.setPrivatekey_FileBlob(privatekey_File);
		}
	}

	@JSON
	@Override
	public Blob getPublickey_File() {
		if (_publickey_FileBlobModel == null) {
			try {
				_publickey_FileBlobModel = GenKeyLocalServiceUtil.getPublickey_FileBlobModel(getPrimaryKey());
			}
			catch (Exception e) {
			}
		}

		Blob blob = null;

		if (_publickey_FileBlobModel != null) {
			blob = _publickey_FileBlobModel.getPublickey_FileBlob();
		}

		return blob;
	}

	@Override
	public void setPublickey_File(Blob publickey_File) {
		if (_publickey_FileBlobModel == null) {
			_publickey_FileBlobModel = new GenKeyPublickey_FileBlobModel(getPrimaryKey(),
					publickey_File);
		}
		else {
			_publickey_FileBlobModel.setPublickey_FileBlob(publickey_File);
		}
	}

	@JSON
	@Override
	public String getPublickey_Text() {
		if (_publickey_Text == null) {
			return StringPool.BLANK;
		}
		else {
			return _publickey_Text;
		}
	}

	@Override
	public void setPublickey_Text(String publickey_Text) {
		_publickey_Text = publickey_Text;
	}

	@JSON
	@Override
	public String getKey_dateCreated() {
		if (_key_dateCreated == null) {
			return StringPool.BLANK;
		}
		else {
			return _key_dateCreated;
		}
	}

	@Override
	public void setKey_dateCreated(String key_dateCreated) {
		_key_dateCreated = key_dateCreated;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			GenKey.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public GenKey toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (GenKey)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		GenKeyImpl genKeyImpl = new GenKeyImpl();

		genKeyImpl.setGenkeyId(getGenkeyId());
		genKeyImpl.setUserId(getUserId());
		genKeyImpl.setPublickey_Text(getPublickey_Text());
		genKeyImpl.setKey_dateCreated(getKey_dateCreated());

		genKeyImpl.resetOriginalValues();

		return genKeyImpl;
	}

	@Override
	public int compareTo(GenKey genKey) {
		long primaryKey = genKey.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof GenKey)) {
			return false;
		}

		GenKey genKey = (GenKey)obj;

		long primaryKey = genKey.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		GenKeyModelImpl genKeyModelImpl = this;

		genKeyModelImpl._privatekey_FileBlobModel = null;

		genKeyModelImpl._publickey_FileBlobModel = null;
	}

	@Override
	public CacheModel<GenKey> toCacheModel() {
		GenKeyCacheModel genKeyCacheModel = new GenKeyCacheModel();

		genKeyCacheModel.genkeyId = getGenkeyId();

		genKeyCacheModel.userId = getUserId();

		genKeyCacheModel.publickey_Text = getPublickey_Text();

		String publickey_Text = genKeyCacheModel.publickey_Text;

		if ((publickey_Text != null) && (publickey_Text.length() == 0)) {
			genKeyCacheModel.publickey_Text = null;
		}

		genKeyCacheModel.key_dateCreated = getKey_dateCreated();

		String key_dateCreated = genKeyCacheModel.key_dateCreated;

		if ((key_dateCreated != null) && (key_dateCreated.length() == 0)) {
			genKeyCacheModel.key_dateCreated = null;
		}

		return genKeyCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{genkeyId=");
		sb.append(getGenkeyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", publickey_Text=");
		sb.append(getPublickey_Text());
		sb.append(", key_dateCreated=");
		sb.append(getKey_dateCreated());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("DocRegistration.model.GenKey");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>genkeyId</column-name><column-value><![CDATA[");
		sb.append(getGenkeyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>publickey_Text</column-name><column-value><![CDATA[");
		sb.append(getPublickey_Text());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>key_dateCreated</column-name><column-value><![CDATA[");
		sb.append(getKey_dateCreated());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = GenKey.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			GenKey.class
		};
	private long _genkeyId;
	private long _userId;
	private GenKeyPrivatekey_FileBlobModel _privatekey_FileBlobModel;
	private GenKeyPublickey_FileBlobModel _publickey_FileBlobModel;
	private String _publickey_Text;
	private String _key_dateCreated;
	private GenKey _escapedModel;
}